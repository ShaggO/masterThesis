clc, clear all

imNumKey = 25;
setNum = 1;
imNum = [1 12 24 26 37 49];
liNum = 'diffuse';
before = find(imNum < imNumKey,1,'last');

peakThresholdDog = 10;
peakThresholdHarris = 5*10^4;

method(1) = methodStruct( ...
   'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
   'cellhist',{'contentType','go', ...
   'blockType','square','blockSize',[4 4],'blockSpacing',[3 3], ...
   'spatialSigma',[1.5 1.5],'binSigma',1/2,'binCount',8},{'ro-'});
method(2) = methodStruct( ...
   'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
   'cellhist',{'contentType','si', ...
   'blockType','square','blockSize',[4 4],'blockSpacing',[3 3], ...
   'spatialSigma',[1.5 1.5],'binSigma',1/2,'binCount',8},{'go-'});
method(3) = methodStruct( ...
   'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
   'cellhist',{'contentType','go-si', ...
   'blockType','square','blockSize',[4 4],'blockSpacing',[3 3], ...
   'spatialSigma',[1.5 1.5],'binSigma',[1/2 1/2],'binCount',[4 4]},{'bo-'});
method(4) = methodStruct( ...
   'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
   'cellhist',{'contentType','go,si', ...
   'blockType','square','blockSize',[4 4],'blockSpacing',[3 3], ...
   'spatialSigma',[1.5 1.5],'binSigma',[1/2 1/2],'binCount',[4 4]},{'mo-'});

% method(1) = methodStruct( ...
%    'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
%    'sift',{'colour','gray'},{'rx-'});
% method(2) = methodStruct( ...
%    'vl',{'method','dog','peakthreshold',peakThresholdDog}, ...
%    'sift',{'colour','gray'},{'bx-'});
% method(3) = methodStruct( ...
%    'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
%    'cellhist',{'contentType','go', ...
%    'blockType','square','blockSize',[4 4],'blockSpacing',[3 3], ...
%    'spatialSigma',[1.5 1.5],'binSigma',pi/6,'binCount',8},{'mo-'});
% method(4) = methodStruct( ...
%    'vl',{'method','dog','peakthreshold',peakThresholdDog}, ...
%    'cellhist',{'contentType','go', ...
%    'blockType','square','blockSize',[4 4],'blockSpacing',[3 3], ...
%    'spatialSigma',[1.5 1.5],'binSigma',pi/6,'binCount',8},{'co-'});

% method(1) = methodStruct( ...
%    'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
%    'sift',{'colour','gray'},{'rx-'});
% method(2) = methodStruct( ...
%    'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
%    'sift',{'colour','rgb'},{'go-'});
% method(3) = methodStruct( ...
%    'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
%    'sift',{'colour','opponent'},{'bo-'});
% method(4) = methodStruct( ...
%     'vl',{'method','MultiscaleHarris','peakthreshold',peakThresholdHarris}, ...
%     'sift',{'colour','gaussian opponent'},{'ko-'});
% method(5) = methodStruct( ...
%    'vl',{'method','dog','peakthreshold',peakThresholdDog}, ...
%    'k-jet',{'k',5,'sigma',10.6,'domain','spatial'},{'co-'});
% method(6) = methodStruct( ...
%    'dog',{'sigma',10.6,'k',2,'threshold',0.01}, ...
%    'k-jet',{'k',5,'sigma',10.6,'domain','auto'},{'mo-'});

tic
for i = 1:numel(method)
    m = method(i);
    [mFunc, mName{i}] = parseMethod(m);
    disp([timestamp() ' Method ' num2str(i) '/' num2str(numel(method)) ': ' mName{i}])
    matches(i,:) = imageCorrespondence(setNum,imNum,liNum,mFunc,mName{i});
end

figure('units','normalized','outerposition',[0 0 1 1])
axis([imNum(1)-1 imNum(end)+1 0 1])
hold on
for i = 1:numel(method)
    h(i) = plot(imNum(1:before),[matches(i,1:before).ROCAUC],method(i).plotParams{:});
    plot(imNum(before+1:end),[matches(i,before+1:end).ROCAUC],method(i).plotParams{:})
end
title('ROC AUC')
legend(h,mName,'location','southeast','interpreter','none')

figure('units','normalized','outerposition',[0 0 1 1])
axis([imNum(1)-1 imNum(end)+1 0 1])
hold on
for i = 1:numel(method)
    h(i) = plot(imNum(1:before),[matches(i,1:before).PRAUC],method(i).plotParams{:});
    plot(imNum(before+1:end),[matches(i,before+1:end).PRAUC],method(i).plotParams{:})
end
title('PR AUC')
legend(h,mName,'location','southeast','interpreter','none')
